@model IEnumerable<ApexVolley.Models.Player>
@{
    ViewData["Title"] = "I giocatori";
    var canCreate = User.IsInRole("Staff") || User.IsInRole("Admin");
}

<div class="players-container">
    <!-- Header con effetto glassmorphism -->
    <div class="hero-header">
        <div class="hero-background">
            <div class="floating-orb orb-1"></div>
            <div class="floating-orb orb-2"></div>
            <div class="floating-orb orb-3"></div>
        </div>
        <h1 class="hero-title">
            <span class="title-text">I Nostri</span>
            <span class="title-accent">Campioni</span>
        </h1>
        <p class="hero-subtitle">La squadra che fa la differenza</p>

        @if (canCreate)
        {
            <div class="hero-action">
                <a asp-action="Create" class="btn-premium">
                    <span class="btn-icon">⚡</span>
                    <span>Aggiungi Nuovo Giocatore</span>
                    <div class="btn-shine"></div>
                </a>
            </div>
        }
    </div>

    <!-- Grid dei giocatori -->
    <div class="players-grid">
        @{
            int index = 0;
        }
        @foreach (var player in Model)
        {
            var imagePath = $"/images/players/{player.NumeroMaglia}.jpg";
            var delay = 0.1 * index;
            var roleClass = GetRoleClass(player.Ruolo);

            <div class="player-card-wrapper" style="animation-delay: @($"{delay:0.1}s")">
                <div class="player-card" data-player-id="@player.Id">
                    <!-- Effetto glow di sfondo -->
                    <div class="card-glow"></div>

                    <!-- Header della card con numero maglia -->
                    <div class="card-header">
                        <div class="jersey-number">@player.NumeroMaglia</div>
                        <div class="role-badge @roleClass">@player.Ruolo</div>
                    </div>

                    <!-- Immagine del giocatore -->
                    <div class="player-image-container">
                        <img src="@imagePath" class="player-image" alt="@player.Nome @player.Cognome"
                             onerror="this.onerror=null;this.src='/images/players/default.jpg';">
                        <div class="image-overlay">
                            <div class="overlay-content">
                                <button class="details-btn" onclick="toggleDetails(@player.Id)">
                                    <span class="btn-text">Scopri di più</span>
                                    <span class="btn-arrow">→</span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Contenuto della card -->
                    <div class="card-content">
                        <h3 class="player-name">@player.Nome @player.Cognome</h3>
                        <div class="player-stats-preview">
                            <div class="stat-item">
                                <span class="stat-label">Altezza</span>
                                <span class="stat-value">@player.AltezzaCm cm</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Età</span>
                                <span class="stat-value">@player.Eta anni</span>
                            </div>
                        </div>
                    </div>

                    <!-- Dettagli espandibili -->
                    <div class="player-details" id="details-@player.Id">
                        <div class="details-content">
                            <div class="stats-grid">
                                <div class="stat-card">
                                    <div class="stat-icon">🎂</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Data di nascita</span>
                                        <span class="stat-data">@player.DataNascita.ToString("dd/MM/yyyy")</span>
                                    </div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">📏</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Altezza</span>
                                        <span class="stat-data">@player.AltezzaCm cm</span>
                                    </div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">🏐</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Ruolo</span>
                                        <span class="stat-data">@player.Ruolo</span>
                                    </div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">#️⃣</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Maglia</span>
                                        <span class="stat-data">#@player.NumeroMaglia</span>
                                    </div>
                                </div>
                            </div>

                            @if (canCreate)
                            {
                                <div class="admin-actions">
                                    <a asp-action="Edit" asp-route-id="@player.Id" class="action-btn edit-btn">
                                        <span class="btn-icon">✏️</span>
                                        <span>Modifica</span>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@player.Id" class="action-btn delete-btn">
                                        <span class="btn-icon">🗑️</span>
                                        <span>Elimina</span>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            index++;
        }
    </div>
</div>

@functions {
    private string GetRoleClass(string ruolo)
    {
        if (string.IsNullOrEmpty(ruolo)) return "role-default";

        var role = ruolo.ToLower().Trim();

        if (role.Contains("schiacciator") || role.Contains("attaccan"))
            return "role-attacker";
        else if (role.Contains("alzator") || role.Contains("regist"))
            return "role-setter";
        else if (role.Contains("centrale") || role.Contains("muro"))
            return "role-middle";
        else if (role.Contains("libero"))
            return "role-libero";
        else if (role.Contains("opposto") || role.Contains("oppost"))
            return "role-opposite";
        else
            return "role-default";
    }
}

<style>
  
    .players-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 25%, #16213e 50%, #1a1a2e 75%, #0c0c0c 100%);
        position: relative;
        overflow-x: hidden;
    }

    /* Hero Header */
    .hero-header {
        position: relative;
        text-align: center;
        padding: 80px 20px 60px;
        background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(13,110,253,0.1) 50%, rgba(0,0,0,0.8) 100%);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(255,255,255,0.1);
        margin-bottom: 40px;
    }

    .hero-background {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: hidden;
        z-index: 0;
    }

    .floating-orb {
        position: absolute;
        border-radius: 50%;
        filter: blur(1px);
        animation: float 6s ease-in-out infinite;
    }

    .orb-1 {
        width: 100px;
        height: 100px;
        background: linear-gradient(45deg, #007bff, #6f42c1);
        top: 20%;
        left: 10%;
        animation-delay: 0s;
    }

    .orb-2 {
        width: 150px;
        height: 150px;
        background: linear-gradient(45deg, #20c997, #17a2b8);
        top: 60%;
        right: 15%;
        animation-delay: 2s;
    }

    .orb-3 {
        width: 80px;
        height: 80px;
        background: linear-gradient(45deg, #fd7e14, #dc3545);
        bottom: 30%;
        left: 70%;
        animation-delay: 4s;
    }

    @@keyframes float {
        0%, 100%

    {
        transform: translateY(0px) rotate(0deg);
    }

    33% {
        transform: translateY(-20px) rotate(120deg);
    }

    66% {
        transform: translateY(10px) rotate(240deg);
    }

    }

    .hero-title {
        position: relative;
        z-index: 2;
        margin-bottom: 20px;
    }

    .title-text {
        display: block;
        font-size: 2.5rem;
        font-weight: 300;
        color: rgba(255,255,255,0.8);
        margin-bottom: 10px;
        animation: slideInFromLeft 1s ease-out;
    }

    .title-accent {
        display: block;
        font-size: 4rem;
        font-weight: 800;
        background: linear-gradient(135deg, #007bff, #6f42c1, #20c997);
        background-size: 300% 300%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: gradientShift 3s ease-in-out infinite, slideInFromRight 1s ease-out;
    }

    .hero-subtitle {
        position: relative;
        z-index: 2;
        font-size: 1.2rem;
        color: rgba(255,255,255,0.6);
        margin-bottom: 40px;
        animation: fadeInUp 1s ease-out 0.5s both;
    }

    @@keyframes slideInFromLeft {
        from

    {
        transform: translateX(-100px);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }

    }

    @@keyframes slideInFromRight {
        from

    {
        transform: translateX(100px);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }

    }

    @@keyframes fadeInUp {
        from

    {
        transform: translateY(30px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    @@keyframes gradientShift {
        0%, 100%

    {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    }

    /* Bottone Premium */
    .btn-premium {
        position: relative;
        display: inline-flex;
        align-items: center;
        gap: 12px;
        padding: 16px 32px;
        background: linear-gradient(135deg, #007bff, #6f42c1);
        color: white;
        text-decoration: none;
        border-radius: 50px;
        font-weight: 600;
        font-size: 1.1rem;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 8px 25px rgba(0,123,255,0.3);
        animation: fadeInUp 1s ease-out 0.8s both;
    }

        .btn-premium:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 15px 35px rgba(0,123,255,0.4);
            color: white;
            text-decoration: none;
        }

    .btn-shine {
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
        transition: left 0.5s ease;
    }

    .btn-premium:hover .btn-shine {
        left: 100%;
    }

    .btn-icon {
        font-size: 1.3rem;
        animation: bounce 2s infinite;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-5px);
    }

    60% {
        transform: translateY(-3px);
    }

    }

    /* Grid dei giocatori */
    .players-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 30px;
        padding: 0 20px 80px;
        max-width: 1400px;
        margin: 0 auto;
    }

    .player-card-wrapper {
        animation: cardEntrance 0.8s ease-out forwards;
        opacity: 0;
        transform: translateY(50px);
    }

    @@keyframes cardEntrance {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .player-card {
        position: relative;
        background: rgba(255,255,255,0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 24px;
        overflow: hidden;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: pointer;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

        .player-card:hover {
            transform: translateY(-10px) scale(1.02);
            border-color: rgba(0,123,255,0.5);
        }

    .card-glow {
        position: absolute;
        top: -2px;
        left: -2px;
        right: -2px;
        bottom: -2px;
        background: linear-gradient(135deg, #007bff, #6f42c1, #20c997, #fd7e14);
        background-size: 400% 400%;
        border-radius: 24px;
        z-index: -1;
        opacity: 0;
        animation: gradientMove 3s ease infinite;
        transition: opacity 0.3s ease;
    }

    .player-card:hover .card-glow {
        opacity: 0.6;
    }

    @@keyframes gradientMove {
        0%, 100%

    {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    }

    /* Header della card */
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 20px 20px 0;
        position: relative;
        z-index: 2;
    }

    .jersey-number {
        font-size: 3rem;
        font-weight: 900;
        color: rgba(255,255,255,0.3);
        line-height: 1;
        text-shadow: 0 2px 10px rgba(0,0,0,0.5);
    }

    /* Badge ruoli */
    .role-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
        animation: badgePulse 2s ease-in-out infinite;
    }

    @@keyframes badgePulse {
        0%, 100%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    }

    .role-attacker {
        background: linear-gradient(135deg, rgba(220,53,69,0.8), rgba(253,126,20,0.8));
        color: white;
        box-shadow: 0 4px 15px rgba(220,53,69,0.3);
    }

    .role-setter {
        background: linear-gradient(135deg, rgba(0,123,255,0.8), rgba(111,66,193,0.8));
        color: white;
        box-shadow: 0 4px 15px rgba(0,123,255,0.3);
    }

    .role-middle {
        background: linear-gradient(135deg, rgba(40,167,69,0.8), rgba(32,201,151,0.8));
        color: white;
        box-shadow: 0 4px 15px rgba(40,167,69,0.3);
    }

    .role-libero {
        background: linear-gradient(135deg, rgba(255,193,7,0.8), rgba(253,126,20,0.8));
        color: #212529;
        box-shadow: 0 4px 15px rgba(255,193,7,0.3);
    }

    .role-opposite {
        background: linear-gradient(135deg, rgba(111,66,193,0.8), rgba(232,62,140,0.8));
        color: white;
        box-shadow: 0 4px 15px rgba(111,66,193,0.3);
    }

    .role-default {
        background: linear-gradient(135deg, rgba(108,117,125,0.8), rgba(73,80,87,0.8));
        color: white;
        box-shadow: 0 4px 15px rgba(108,117,125,0.3);
    }

    /* Immagine del giocatore */
    .player-image-container {
        position: relative;
        width: 100%;
        height: 250px;
        overflow: hidden;
        margin: 20px 0;
    }

    .player-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: all 0.4s ease;
        filter: brightness(0.9) saturate(1.1);
    }

    .player-card:hover .player-image {
        transform: scale(1.08);
        filter: brightness(1) saturate(1.2);
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, transparent 0%, rgba(0,0,0,0.7) 100%);
        display: flex;
        align-items: flex-end;
        justify-content: center;
        padding: 20px;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .player-card:hover .image-overlay {
        opacity: 1;
    }

    .details-btn {
        background: rgba(255,255,255,0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.3);
        color: white;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .details-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }

    .btn-arrow {
        transition: transform 0.3s ease;
    }

    .details-btn:hover .btn-arrow {
        transform: translateX(5px);
    }

    /* Contenuto della card */
    .card-content {
        padding: 0 20px 20px;
        flex-grow: 1;
    }

    .player-name {
        font-size: 1.4rem;
        font-weight: 700;
        color: white;
        margin-bottom: 16px;
        text-align: center;
    }

    .player-stats-preview {
        display: flex;
        justify-content: space-around;
        gap: 20px;
    }

    .stat-item {
        text-align: center;
        flex: 1;
    }

    .stat-label {
        display: block;
        font-size: 0.8rem;
        color: rgba(255,255,255,0.6);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 4px;
    }

    .stat-value {
        display: block;
        font-size: 1.1rem;
        font-weight: 600;
        color: #007bff;
    }

    /* Dettagli espandibili */
    .player-details {
        max-height: 0;
        overflow: hidden;
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        background: rgba(0,0,0,0.3);
        backdrop-filter: blur(10px);
    }

        .player-details.active {
            max-height: 400px;
            border-top: 1px solid rgba(255,255,255,0.1);
        }

    .details-content {
        padding: 30px 20px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 15px;
        margin-bottom: 25px;
    }

    .stat-card {
        background: rgba(255,255,255,0.05);
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 12px;
        padding: 15px;
        text-align: center;
        transition: all 0.3s ease;
    }

        .stat-card:hover {
            background: rgba(255,255,255,0.1);
            transform: translateY(-2px);
        }

    .stat-icon {
        font-size: 1.5rem;
        margin-bottom: 8px;
    }

    .stat-title {
        display: block;
        font-size: 0.7rem;
        color: rgba(255,255,255,0.6);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 4px;
    }

    .stat-data {
        display: block;
        font-size: 0.9rem;
        font-weight: 600;
        color: white;
    }

    /* Azioni admin */
    .admin-actions {
        display: flex;
        gap: 12px;
        justify-content: center;
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 20px;
        border-radius: 20px;
        text-decoration: none;
        font-weight: 600;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }

    .edit-btn {
        background: rgba(255,193,7,0.2);
        color: #ffc107;
    }

        .edit-btn:hover {
            background: rgba(255,193,7,0.3);
            color: #ffc107;
            transform: translateY(-2px);
        }

    .delete-btn {
        background: rgba(220,53,69,0.2);
        color: #dc3545;
    }

        .delete-btn:hover {
            background: rgba(220,53,69,0.3);
            color: #dc3545;
            transform: translateY(-2px);
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .players-grid

    {
        grid-template-columns: 1fr;
        padding: 0 15px 60px;
        gap: 25px;
    }

    .title-text {
        font-size: 2rem;
    }

    .title-accent {
        font-size: 3rem;
    }

    .hero-header {
        padding: 60px 15px 40px;
    }

    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    }

    @@media (max-width: 480px) {
        .card-header

    {
        padding: 15px 15px 0;
    }

    .jersey-number {
        font-size: 2.5rem;
    }

    .player-image-container {
        height: 200px;
        margin: 15px 0;
    }

    }
</style>

<script>
            function toggleDetails(playerId) {
        // Trova tutti gli elementi dei dettagli
        const allDetailsElements = document.querySelectorAll('.player-details');

        // Controlla se almeno uno è già aperto
        const hasActiveDetails = document.querySelector('.player-details.active');

        if (hasActiveDetails) {
            // Se almeno uno è aperto, chiudi tutti
            allDetailsElements.forEach(el => {
                el.classList.remove('active');
            });

            // Cambia il testo di tutti i bottoni
            document.querySelectorAll('.btn-text').forEach(btn => {
                btn.textContent = 'Scopri di più';
            });
            document.querySelectorAll('.btn-arrow').forEach(arrow => {
                arrow.textContent = '→';
            });
        } else {
            // Se nessuno è aperto, apri tutti
            allDetailsElements.forEach(el => {
                el.classList.add('active');
            });

            // Cambia il testo di tutti i bottoni
            document.querySelectorAll('.btn-text').forEach(btn => {
                btn.textContent = 'Nascondi dettagli';
            });
            document.querySelectorAll('.btn-arrow').forEach(arrow => {
                arrow.textContent = '↑';
            });
        }
    }

    // Effetti al caricamento della pagina
    document.addEventListener('DOMContentLoaded', function() {
        // Parallax leggero per le orbs
        window.addEventListener('scroll', function() {
            const scrolled = window.pageYOffset;
            const orbs = document.querySelectorAll('.floating-orb');

            orbs.forEach((orb, index) => {
                const speed = 0.1 + (index * 0.05);
                orb.style.transform = `translateY(${scrolled * speed}px) rotate(${scrolled * 0.1}deg)`;
            });
        });

        // Intersection Observer per animazioni
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                }
            });
        }, observerOptions);

        document.querySelectorAll('.player-card-wrapper').forEach(card => {
            observer.observe(card);
        });

        // Aggiungi un bottone globale per aprire/chiudere tutti i dettagli
        const heroAction = document.querySelector('.hero-action');
        if (heroAction) {
            const toggleAllBtn = document.createElement('button');
            toggleAllBtn.className = 'btn-premium toggle-all-btn';
            toggleAllBtn.innerHTML = `
                <span class="btn-icon">👥</span>
                <span class="toggle-all-text">Mostra tutti i dettagli</span>
                <div class="btn-shine"></div>
            `;
            toggleAllBtn.style.marginLeft = '20px';

            toggleAllBtn.addEventListener('click', function() {
                // Simula il click su qualsiasi giocatore per attivare il toggle
                toggleDetails(1);

                // Aggiorna il testo del bottone globale
                const hasActive = document.querySelector('.player-details.active');
                const toggleText = this.querySelector('.toggle-all-text');
                toggleText.textContent = hasActive ? 'Nascondi tutti i dettagli' : 'Mostra tutti i dettagli';
            });

            heroAction.appendChild(toggleAllBtn);
        }
    });
</script>