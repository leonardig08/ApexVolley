@model IEnumerable<ApexVolley.Models.Player>
@{
    ViewData["Title"] = "I giocatori";
    var canCreate = User.IsInRole("Staff") || User.IsInRole("Admin");
}

<div class="players-container pb-0">
    <!-- Header con effetto glassmorphism -->
    
    <div>
        <div class="d-flex align-content-center justify-content-center">
            <div class="hero-header h-auto">
                <div class="hero-background">
                    <div class="floating-orb orb-1"></div>
                    <div class="floating-orb orb-2"></div>
                    <div class="floating-orb orb-3"></div>
                    <div class="volleyball-pattern"></div>
                </div>
                <h1 class="hero-title">
                    <span class="title-text">I Nostri</span>
                    <span class="title-accent">Giocatori</span>
                </h1>
                <p class="hero-subtitle">Quelli che vincono le partite!</p>

                @if (canCreate)
                {
                    <div class="hero-action">
                        <a asp-action="Create" class="btn-premium">
                            <span class="btn-icon">⚡</span>
                            <span>Aggiungi Nuovo Giocatore</span>
                            <div class="btn-shine"></div>
                        </a>
                    </div>
                }
            </div>
      </div>

    <!-- Grid dei giocatori -->
    <div class="players-grid">
        @{
            int index = 0;
        }
        @foreach (var player in Model)
        {
            var imagePath = $"/images/players/{player.NumeroMaglia}.jpg";
            var delay = 0.1;
            var roleClass = GetRoleClass(player.Ruolo);

            <div class="player-card-wrapper" style="animation-delay: @($"{delay:0.1}s")">
                <div class="player-card" data-player-id="@player.Id">
                    <!-- Effetto glow di sfondo -->
                    <div class="card-glow"></div>

                    <!-- Header della card con numero maglia -->
                    <div class="card-header">
                        <div class="jersey-number">@player.NumeroMaglia</div>
                        <div class="role-badge @roleClass">@player.Ruolo</div>
                    </div>

                    <!-- Immagine del giocatore -->
                    <div class="player-image-container">
                        <img src="@imagePath" class="player-image" alt="@player.Nome @player.Cognome"
                             onerror="this.onerror=null;this.src='/images/players/default.jpg';">
                        <div class="image-overlay">
                            <div class="overlay-content">
                                <button class="details-btn" onclick="toggleDetails(@player.Id)">
                                    <span class="btn-text">Scopri di più</span>
                                    <span class="btn-arrow">→</span>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Contenuto della card -->
                    <div class="card-content">
                        <h3 class="player-name">@player.Nome @player.Cognome</h3>
                        <div class="player-stats-preview">
                            <div class="stat-item">
                                <span class="stat-label">Altezza</span>
                                <span class="stat-value">@player.AltezzaCm cm</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Età</span>
                                <span class="stat-value">@player.Eta anni</span>
                            </div>
                        </div>
                    </div>

                    <!-- Dettagli espandibili -->
                    <div class="player-details" id="details-@player.Id">
                        <div class="details-content">
                            <div class="stats-grid">
                                <div class="stat-card">
                                    <div class="stat-icon">🎂</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Data di nascita</span>
                                        <span class="stat-data">@player.DataNascita.ToString("dd/MM/yyyy")</span>
                                    </div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">📏</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Altezza</span>
                                        <span class="stat-data">@player.AltezzaCm cm</span>
                                    </div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">🏐</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Ruolo</span>
                                        <span class="stat-data">@player.Ruolo</span>
                                    </div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-icon">#️⃣</div>
                                    <div class="stat-info">
                                        <span class="stat-title">Maglia</span>
                                        <span class="stat-data">#@player.NumeroMaglia</span>
                                    </div>
                                </div>
                            </div>

                            @if (canCreate)
                            {
                                <div class="admin-actions">
                                    <a asp-action="Edit" asp-route-id="@player.Id" class="action-btn edit-btn">
                                        <span class="btn-icon">✏️</span>
                                        <span>Modifica</span>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@player.Id" class="action-btn delete-btn">
                                        <span class="btn-icon">🗑️</span>
                                        <span>Elimina</span>
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            index++;
        }
    </div>
</div>

@functions {
    private string GetRoleClass(string ruolo)
    {
        if (string.IsNullOrEmpty(ruolo)) return "role-default";

        var role = ruolo.ToLower().Trim();

        if (role.Contains("schiacciator") || role.Contains("attaccan") || role.Contains("band"))
            return "role-attacker";
        else if (role.Contains("alzator") || role.Contains("regist") || role.Contains("pallegg"))
            return "role-setter";
        else if (role.Contains("centrale") || role.Contains("muro"))
            return "role-middle";
        else if (role.Contains("libero"))
            return "role-libero";
        else if (role.Contains("opposto") || role.Contains("oppost"))
            return "role-opposite";
        else
            return "role-default";
    }
}

<style>
    

    

    @@keyframes float {
        0%, 100%

    {
        transform: translateY(0px) rotate(0deg);
    }

    33% {
        transform: translateY(-20px) rotate(120deg);
    }

    66% {
        transform: translateY(10px) rotate(240deg);
    }

    }

    @@keyframes slideInFromLeft {
        from

    {
        transform: translateX(-100px);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }

    }

    @@keyframes slideInFromRight {
        from

    {
        transform: translateX(100px);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }

    }

    @@keyframes fadeInUp {
        from

    {
        transform: translateY(30px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    @@keyframes gradientShift {
        0%, 100%

    {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-5px);
    }

    60% {
        transform: translateY(-3px);
    }

    }

    @@keyframes cardEntrance {
        to

    {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes gradientMove {
        0%, 100%

    {
        background-position: 0% 50%;
    }

    50% {
        background-position: 100% 50%;
    }

    }


    @@keyframes badgePulse {
        0%, 100%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    }

    /* Responsive */
    @@media (max-width: 768px) {
        .players-grid

    {
        grid-template-columns: 1fr;
        padding: 0 15px 60px;
        gap: 25px;
    }

    .title-text {
        font-size: 2rem;
    }

    .title-accent {
        font-size: 3rem;
    }

    .hero-header {
        padding: 60px 15px 40px;
    }

    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    }

    @@media (max-width: 480px) {
        .card-header

    {
        padding: 15px 15px 0;
    }

    .jersey-number {
        font-size: 2.5rem;
    }

    .player-image-container {
        height: 200px;
        margin: 15px 0;
    }

    }
</style>

<script>
            function toggleDetails(playerId) {
        // Trova tutti gli elementi dei dettagli
        const allDetailsElements = document.querySelectorAll('.player-details');

        // Controlla se almeno uno è già aperto
        const hasActiveDetails = document.querySelector('.player-details.active');

        if (hasActiveDetails) {
            // Se almeno uno è aperto, chiudi tutti
            allDetailsElements.forEach(el => {
                el.classList.remove('active');
            });

            // Cambia il testo di tutti i bottoni
            document.querySelectorAll('.btn-text').forEach(btn => {
                btn.textContent = 'Scopri di più';
            });
            document.querySelectorAll('.btn-arrow').forEach(arrow => {
                arrow.textContent = '→';
            });
        } else {
            // Se nessuno è aperto, apri tutti
            allDetailsElements.forEach(el => {
                el.classList.add('active');
            });

            // Cambia il testo di tutti i bottoni
            document.querySelectorAll('.btn-text').forEach(btn => {
                btn.textContent = 'Nascondi dettagli';
            });
            document.querySelectorAll('.btn-arrow').forEach(arrow => {
                arrow.textContent = '↑';
            });
        }
    }

    // Effetti al caricamento della pagina
    document.addEventListener('DOMContentLoaded', function() {
        // Parallax leggero per le orbs
        window.addEventListener('scroll', function() {
            const scrolled = window.pageYOffset;
            const orbs = document.querySelectorAll('.floating-orb');

            orbs.forEach((orb, index) => {
                const speed = 0.1 + (index * 0.05);
                orb.style.transform = `translateY(${scrolled * speed}px) rotate(${scrolled * 0.1}deg)`;
            });
        });

        // Intersection Observer per animazioni
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                }
            });
        }, observerOptions);

        document.querySelectorAll('.player-card-wrapper').forEach(card => {
            observer.observe(card);
        });

        // Aggiungi un bottone globale per aprire/chiudere tutti i dettagli
        const heroAction = document.querySelector('.hero-action');
        if (heroAction) {
            const toggleAllBtn = document.createElement('button');
            toggleAllBtn.className = 'btn-premium toggle-all-btn';
            toggleAllBtn.innerHTML = `
                <span class="btn-icon">👥</span>
                <span class="toggle-all-text">Mostra tutti i dettagli</span>
                <div class="btn-shine"></div>
            `;
            toggleAllBtn.style.marginLeft = '20px';

            toggleAllBtn.addEventListener('click', function() {
                // Simula il click su qualsiasi giocatore per attivare il toggle
                toggleDetails(1);

                // Aggiorna il testo del bottone globale
                const hasActive = document.querySelector('.player-details.active');
                const toggleText = this.querySelector('.toggle-all-text');
                toggleText.textContent = hasActive ? 'Nascondi tutti i dettagli' : 'Mostra tutti i dettagli';
            });

            heroAction.appendChild(toggleAllBtn);
        }
    });
</script>
    <!-- Footer -->
    <footer class="border-top footer text-muted">
        <div class="container text-center">
            <p>
                &copy; 2025 - ApexVolley -
                <a href="/" class="text-apex-gold">Home</a> |
                <a href="mailto:info@apexvolley.it" class="text-apex-gold">Contatti</a> |
                <a asp-controller="Home" asp-action="Privacy" class="text-apex-gold">Privacy</a>
            </p>
        </div>
    </footer>
